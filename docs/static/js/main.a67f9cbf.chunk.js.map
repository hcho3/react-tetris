{"version":3,"sources":["constants.js","util.js","index.js"],"names":["TetrominoShape","NoShape","ZShape","SShape","LineShape","TShape","SquareShape","LShape","MirroredLShape","Object","freeze","squareDim","numRowInBoard","numColInBoard","TetrominoCoordsTable","TetrominoColor","rotateClampX","x","newCoords","newX","newMinX","Math","min","map","e","newMaxX","max","Constants","checkMove","piece","board","newY","coords","y","Square","style","backgroundColor","this","props","color","width","height","position","top","left","React","Component","Game","state","isFallingFinished","numLinesRemoved","currentPiece","isGameOver","Array","fill","newPiece","setState","stopTimer","newPieceShape","keys","length","floor","random","newPieceCoords","slice","shape","commitPieceToBoard","gameOver","deltaX","deltaY","isValidMove","assign","entry","tryMove","pieceDropped","newBoard","row","elem","removeFullLines","linesToRemove","lineIsFull","push","yy","xx","event","code","rotateRight","rotateLeft","dropDown","oneLineDown","document","addEventListener","handleKeyDown","timer","setInterval","handleTimerTick","start","clearInterval","statusText","boardRendered","currentPieceRendered","index","id","padding","fontFamily","margin","fontSize","href","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a67f9cbf.chunk.js","sourcesContent":["const TetrominoShape = {\n  NoShape: 0,\n  ZShape: 1,\n  SShape: 2,\n  LineShape: 3,\n  TShape: 4,\n  SquareShape: 5,\n  LShape: 6,\n  MirroredLShape: 7,\n};\nObject.freeze(TetrominoShape);\n\nconst squareDim = 25;\nconst numRowInBoard = 22;\nconst numColInBoard = 10;\nconst BoardWidth = numColInBoard * squareDim;\nconst BoardHeight = numRowInBoard * squareDim;\n\nconst TetrominoCoordsTable = [\n  [[0, 0],     [0, 0],     [0, 0],     [0, 0]],\n  [[0, -1],    [0, 0],     [-1, 0],    [-1, 1]],\n  [[0, -1],    [0, 0],     [1, 0],     [1, 1]],\n  [[0, -1],    [0, 0],     [0, 1],     [0, 2]],\n  [[-1, 0],    [0, 0],     [1, 0],     [0, 1]],\n  [[0, 0],     [1, 0],     [0, 1],     [1, 1]],\n  [[-1, -1],   [0, -1],    [0, 0],     [0, 1]],\n  [[1, -1],    [0, -1],    [0, 0],     [0, 1]]\n];\n\nconst TetrominoColor = [\n  '#000000', '#CC6666', '#66CC66', '#6666CC',\n  '#CCCC66', '#CC66CC', '#66CCCC', '#DAAA00',\n];\n\nexport {\n  TetrominoShape, squareDim, numRowInBoard, numColInBoard, BoardWidth, BoardHeight,\n  TetrominoCoordsTable, TetrominoColor\n};\n","import * as Constants from './constants';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * Math.floor(max - min)) + min;\n}\n\n// When rotating a piece, make sure it doesn't go outside of the board\nfunction rotateClampX(x, newCoords) {\n  let newX = x;\n  const newMinX = x + Math.min(...newCoords.map(e => e[0]));\n  const newMaxX = x + Math.max(...newCoords.map(e => e[0]));\n  if (newMinX < 0) {\n    newX += -newMinX;\n  }\n  if (newMaxX >= Constants.numColInBoard) {\n    newX -= (newMaxX - (Constants.numColInBoard - 1));\n  }\n  return newX;\n}\n\n// Check if the move will be successful. This function does not actually make\n// the move. To make the move actually, call tryMove().\nfunction checkMove(piece, board, newX, newY) {\n  // Check for conditions where the proposed move fails\n  for (const e of piece.coords) {\n    const x = e[0] + newX;\n    const y = e[1] + newY;\n    // The move fails when any part of the piece goes outside of the board\n    if (x < 0 || x >= Constants.numColInBoard || y < 0 || y >= Constants.numRowInBoard) {\n      return false;\n    }\n    // The move fails when there is another block occupying the same place\n    if (board[y][x] !== Constants.TetrominoShape.NoShape) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport { getRandomInt, rotateClampX, checkMove };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Constants from './constants';\nimport { getRandomInt, rotateClampX, checkMove } from './util';\nimport './index.css';\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <div style={{\n          backgroundColor: this.props.color,\n          width: Constants.squareDim,\n          height: Constants.squareDim,\n          position: 'absolute',\n          top: this.props.y * Constants.squareDim,\n          left: this.props.x * Constants.squareDim,\n        }}\n      />\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFallingFinished: false,\n      numLinesRemoved: 0,\n      currentPiece: null,\n      isGameOver: false,\n      board: Array(Constants.numRowInBoard).fill(null).map(\n        () => Array(Constants.numColInBoard).fill(Constants.TetrominoShape.NoShape)\n      ),\n    };\n  }\n\n  start() {\n    this.newPiece();\n  }\n\n  gameOver() {\n    this.setState({\n      currentPiece: null,\n      isGameOver: true,\n    });\n    this.stopTimer();\n  }\n\n  newPiece() {\n    const board = this.state.board;\n\n    const newPieceShape = getRandomInt(1, Object.keys(Constants.TetrominoShape).length);\n    const newPieceCoords = Constants.TetrominoCoordsTable[newPieceShape].slice();\n    const newX = Math.floor(Constants.numColInBoard / 2) + 1;\n    const newY = Math.max(0, -Math.min(...newPieceCoords.map(x => x[1])));\n\n    const newPiece = {\n      shape: newPieceShape,\n      coords: newPieceCoords,\n      x: newX,\n      y: newY,\n    };\n    const isValidMove = checkMove(newPiece, board, newX, newY);\n\n    if (isValidMove) {\n      this.setState({\n        currentPiece: newPiece,\n      });\n    } else {\n      this.commitPieceToBoard(newPiece);\n      this.gameOver();\n    }\n  }\n\n  // Try to move the current piece by (deltaX, deltaY).\n  // If the move is successful, this function returns true.\n  // If the move is not successful, this function returns false.\n  tryMove(deltaX, deltaY) {\n    const currentPiece = this.state.currentPiece;\n    const board = this.state.board;\n    if (!currentPiece) {\n      return true;\n    }\n    const newX = currentPiece.x + deltaX;\n    const newY = currentPiece.y + deltaY;\n    const isValidMove = checkMove(currentPiece, board, newX, newY);\n\n    if (isValidMove) {\n      this.setState({\n        currentPiece: Object.assign({}, currentPiece, {x: newX, y: newY}),\n      });\n    }\n    return isValidMove;\n  }\n\n  rotateLeft() {\n    const currentPiece = this.state.currentPiece;\n    if (!currentPiece || currentPiece.shape === Constants.TetrominoShape.SquareShape) {\n      return;\n    }\n    const newCoords = currentPiece.coords.map((entry) => [entry[1], -entry[0]]);\n    const newX = rotateClampX(currentPiece.x, newCoords);\n\n    this.setState({\n      currentPiece: Object.assign({}, currentPiece, {\n        coords: newCoords,\n        x: newX,\n      }),\n    });\n  }\n\n  rotateRight() {\n    const currentPiece = this.state.currentPiece;\n    if (!currentPiece || currentPiece.shape === Constants.TetrominoShape.SquareShape) {\n      return;\n    }\n    const newCoords = currentPiece.coords.map((entry) => [-entry[1], entry[0]]);\n    const newX = rotateClampX(currentPiece.x, newCoords);\n    this.setState({\n      currentPiece: Object.assign({}, currentPiece, {\n        coords: newCoords,\n        x: newX,\n      }),\n    });\n  }\n\n  dropDown() {\n    const currentPiece = this.state.currentPiece;\n    if (!currentPiece) {\n      return;\n    }\n    let newY = currentPiece.y;\n    while (newY < Constants.numRowInBoard) {\n      if (!this.tryMove(0, 1)) {\n        break;\n      }\n      newY++;\n    }\n    this.pieceDropped();\n  }\n\n  oneLineDown() {\n    if (!this.tryMove(0, 1)) {\n      this.pieceDropped();\n    }\n  }\n\n  commitPieceToBoard(piece) {\n    const board = this.state.board;\n    const newBoard = board.map((row, y) => row.map((elem, x) => {\n      for (const e of piece.coords) {\n        if (x === piece.x + e[0] && y === piece.y + e[1]) {\n          return piece.shape;\n        }\n      }\n      return elem;\n    }));\n    this.setState({\n      board: newBoard,\n    });\n  }\n\n  pieceDropped() {\n    const currentPiece = this.state.currentPiece;\n    this.commitPieceToBoard(currentPiece);\n    this.removeFullLines();\n    if (!this.state.isFallingFinished) {\n      this.newPiece();\n    }\n  }\n\n  removeFullLines() {\n    const numLinesRemoved = this.state.numLinesRemoved;\n    const board = this.state.board;\n    let linesToRemove = [];\n    for (let y = 0; y < Constants.numRowInBoard; y++) {\n      let lineIsFull = true;\n      for (let x = 0; x < Constants.numColInBoard; x++) {\n        if (board[y][x] === Constants.TetrominoShape.NoShape) {\n          lineIsFull = false;\n          break;\n        }\n      }\n      if (lineIsFull) {\n        linesToRemove.push(y);\n      }\n    }\n\n    let newBoard = board.map((row) => row.map((elem) => elem));\n    for (const y of linesToRemove) {\n      for (let yy = y; yy > 0; yy--) {\n        for (let xx = 0; xx < Constants.numColInBoard; xx++) {\n          newBoard[yy][xx] = newBoard[yy - 1][xx];\n        }\n      }\n    }\n\n    if (linesToRemove.length > 0) {\n      this.setState({\n        numLinesRemoved: numLinesRemoved + linesToRemove.length,\n        isFallingFinished: true,\n        currentPiece: null,\n        board: newBoard,\n      });\n    }\n  }\n\n  handleKeyDown(event) {\n    switch (event.code) {\n      case 'ArrowLeft':\n        this.tryMove(-1, 0);\n        break;\n      case 'ArrowRight':\n        this.tryMove(1, 0);\n        break;\n      case 'ArrowDown':\n        this.rotateRight();\n        break;\n      case 'ArrowUp':\n        this.rotateLeft();\n        break;\n      case 'Space':\n        this.dropDown();\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleTimerTick() {\n    if (this.state.isFallingFinished) {\n      this.setState({ isFallingFinished: false });\n      this.newPiece();\n    } else {\n      this.oneLineDown();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', (event) => this.handleKeyDown(event), false);\n    this.timer = setInterval(\n      () => this.handleTimerTick(),\n      200\n    );\n    this.start();\n  }\n\n  componentWillUnmount() {\n    document.addEventListener('keydown', (event) => this.handleKeyDown(event), false);\n    this.stopTimer();\n  }\n\n  stopTimer() {\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n\n  render() {\n    const currentPiece = this.state.currentPiece;\n    const board = this.state.board;\n    const statusText = this.state.isGameOver ?\n        <strong>Game Over</strong>\n      : <span>Score: {this.state.numLinesRemoved}</span>;\n    let boardRendered = [];\n    for (let y = 0; y < Constants.numRowInBoard; y++) {\n      for (let x = 0; x < Constants.numColInBoard; x++) {\n        const shape = board[y][x];\n        if (shape !== Constants.TetrominoShape.NoShape) {\n          boardRendered.push(\n            <Square\n              x={x}\n              y={y}\n              color={Constants.TetrominoColor[shape]}\n              key={y * Constants.numColInBoard + x}\n            />);\n        }\n      }\n    }\n    let currentPieceRendered = null;\n    if (currentPiece) {\n      currentPieceRendered = currentPiece.coords.map((e, index) => {\n        return (\n          <Square\n            x={currentPiece.x + e[0]}\n            y={currentPiece.y + e[1]}\n            color={Constants.TetrominoColor[currentPiece.shape]}\n            key={boardRendered.length + index}\n          />);\n      });\n    }\n    return [\n      <div\n        id=\"board\"\n        key=\"board\"\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: `${Constants.BoardWidth}px`,\n          height: `${Constants.BoardHeight}px`,\n          backgroundColor: '#EEEEEE',\n        }}\n\n      >\n        {boardRendered}\n        {currentPieceRendered}\n      </div>,\n      <div\n        id=\"status\"\n        key=\"status\"\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: `${Constants.BoardWidth}px`,\n          padding: '15px',\n          fontFamily: 'Helvetica, sans-serif',\n        }}\n      >\n        <h2 style={{\n          margin: 0,\n          fontSize: '15pt',\n        }}>Tetris</h2>\n        <p>{statusText}</p>\n        <p>&nbsp;</p>\n        <ul>\n          <li>Left, Right: Move block</li>\n          <li>Up, Down: Rotate block</li>\n          <li>Space: Drop block</li>\n        </ul>\n        <p>\n          <a href=\"https://github.com/hcho3/react-tetris\">Source available @ GitHub</a>\n        </p>\n      </div>\n    ];\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}